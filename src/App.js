import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import axios from 'axios'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Axios
import './App.css';
import QuickExchange from './QuickExchange'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç QuickExchange
import Settings from './Settings'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Settings

function Home() {
    const [isUsdtOnTop, setIsUsdtOnTop] = useState(true);
    const [amount, setAmount] = useState(0);
    const [exchangeRate, setExchangeRate] = useState(75); // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞
    const apiKey = 'YOUR_API_KEY'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à API-–∫–ª—é—á

    useEffect(() => {
        const fetchExchangeRate = async () => {
            try {
                const response = await axios.get(`https://api.exchangerate-api.com/v4/latest/USD`); // –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ API
                setExchangeRate(response.data.rates.RUB); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å RUB –∫ USD
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:", error);
            }
        };

        fetchExchangeRate();
    }, []);

    const toggleCurrencies = () => {
        setIsUsdtOnTop(!isUsdtOnTop);
        setAmount(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—É–º–º—É –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∞–ª—é—Ç
    };

    const handleAmountChange = (e) => {
        setAmount(e.target.value);
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    const convertedAmount = isUsdtOnTop ? amount * exchangeRate : amount / exchangeRate;

    return (
        <div className="home-container">
            <div className="info-box">
                <div className="labels">
                    <div className="currency-label">
                        <h2>–ü—Ä–æ–¥–∞–µ—Ç–µ</h2>
                        <h3>{isUsdtOnTop ? 'USDT' : 'RUB'}</h3>
                    </div>
                    <div className="arrow" onClick={toggleCurrencies} style={{ cursor: 'pointer', fontSize: '24px' }}>
                        ü°∫
                    </div>
                    <div className="currency-label">
                        <h2>–ü–æ–∫—É–ø–∞–µ—Ç–µ</h2>
                        <h3>{isUsdtOnTop ? 'RUB' : 'USDT'}</h3>
                    </div>
                </div>

                {/* –°–ø–ª–æ—à–Ω–∞—è –ª–∏–Ω–∏—è */}
                <hr style={{ margin: '20px 0', border: '1px solid #ccc' }} />

                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
                <div className="input-result-container">
                    <div className="input-container">
                        <input 
                            type="number" 
                            placeholder={isUsdtOnTop ? "–°—É–º–º–∞ –≤ $" : "–°—É–º–º–∞ –≤ ‚ÇΩ"} 
                            value={amount} 
                            onChange={handleAmountChange} 
                        />
                        <span>{isUsdtOnTop ? "$" : "‚ÇΩ"}</span>
                    </div>

                    {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π */}
                    <div className="conversion-result">
                        <span style={{ fontSize: '20px', lineHeight: '1.5' }}>
                            {isUsdtOnTop 
                                ? `–í—ã –ø–æ–ª—É—á–∏—Ç–µ: ${convertedAmount.toFixed(2)} ‚ÇΩ` 
                                : `–í—ã –ø–æ–ª—É—á–∏—Ç–µ: ${convertedAmount.toFixed(2)} $`}
                        </span>
                    </div>
                </div>
            </div>
        </div>
    );
}

function App() {
    return (
        <Router>
            <div className="App">
                <Routes>
                    <Route path="/" element={<Home />} />
                    <Route path="/quick-exchange" element={<QuickExchange />} />
                    <Route path="/settings" element={<Settings />} />
                </Routes>
            </div>
        </Router>
    );
}

export default App;